---
import "../styles/global.css";

import { initializeApp } from "firebase/app";
import { child, get, getDatabase, ref } from "firebase/database";

const firebaseConfig = {
  apiKey: import.meta.env.API_KEY,
  appId: import.meta.env.APP_ID,
  authDomain: import.meta.env.AUTH_DOMAIN,
  databaseURL: import.meta.env.DATABASE_URL,
  measurementId: import.meta.env.MEASUREMENT_ID,
  messagingSenderId: import.meta.env.MESSAGING_SENDER_ID,
  projectId: import.meta.env.PROJECT_ID,
  storageBucket: import.meta.env.STORAGE_BUCKET,
};

const app = initializeApp(firebaseConfig);
const databaseRef = ref(getDatabase(app));

let data = null;

try {
  const snapshot = await get(child(databaseRef, "/"));

  if (snapshot.exists()) {
    data = snapshot.val();
  } else {
    throw new Error("No data available.");
  }
} catch (error) {
  console.error(error);
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script
      src="https://kit.fontawesome.com/70345ad354.js"
      crossorigin="anonymous"
    >

    </script>
    <title>Rafael's List</title>
  </head>
  <body class="page">
    <header class="header">
      <h1 class="header__heading">Rafael's List</h1>
      <nav class="header__nav">
        <i class="fa-brands fa-github-alt header__nav-item"></i>
        <i class="fa-brands fa-youtube header__nav-item"></i>
      </nav>
    </header>

    <section class="intro">
      <p>
        Here's a list of questions I came up with while <a
          href="https://www.youtube.com/playlist?list=PLWzGjDEgHSJrDEUbJxp1J9KFyYg4G4l9Y"
          >streaming myself doing every single question on LeetCode
        </a>. Each question links to a part in a stream where I talk about the
        problem. My intent is not to necessarily teach you how to solve these
        questions (there are plenty of resources for that), but rather, to give
        you a raw look into my thought process. You'll watch me make mistakes,
        hear me struggle and hopefully develop an optimized algorithm by the
        end.
      </p>
    </section>

    <section class="list">
      <details>
        <summary class="list__difficulty">Easy</summary>
        <ul class="list__questions">
          {data.easy.map((question) => (
            <li class="list__question">
              <h3>{question.name}</h3>
              <div class="list__meta">
                <a class="list__link" href={question.video}>
                  Stream Clip
                </a>
                <a class="list__link" href={question.video}>
                  LeetCode Question
                </a>
                <details class="list__details">
                  <summary>Topics</summary>
                  {question.topics.map((topic) => (
                    <p>{topic}</p>
                  ))}
                </details>
              </div>
            </li>
          ))}
        </ul>
      </details>
    </section>
  </body>
</html>
